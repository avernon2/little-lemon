import React, {useMemo, useState} from "react";
import {closestCenter, DndContext, DragEndEvent, PointerSensor, useSensor} from "@dnd-kit/core";
import {arrayMove, SortableContext, useSortable, verticalListSortingStrategy} from "@dnd-kit/sortable";
import {CSS} from "@dnd-kit/utilities";
import {Box, Button, FormControl, InputLabel, MenuItem, Paper, Select, Typography} from "@mui/material";
import RestartAltIcon from '@mui/icons-material/RestartAlt';

import {
    DataGrid,
    GridColDef,
    GridToolbarContainer,
    GridToolbarExport,
    GridToolbarQuickFilter,
    GridToolbarFilterButton,
    GridFilterPanel
} from '@mui/x-data-grid';

interface ColumnItem {
    id: string;
    name: string;
    container: "available" | "active";
}

type Aggregation = "count" | "sum" | "average";

interface PivotTableProps<T> {
    data: T[];
    activeColumns?: string[];
    isLoading?: boolean;
    heading?: string;
}

const SortableItem: React.FC<{ id: string; name: string }> = ({id, name}) => {
    const {attributes, listeners, setNodeRef, transform, transition} = useSortable({id});

    return (
        <Box
            ref={setNodeRef}
            style={{
                transform: CSS.Transform.toString(transform),
                transition,
            }}
            p={0.5}
            mb={1}
            bgcolor="white"
            border={1}
            borderRadius={1}
            boxShadow={1}
            sx={{
                cursor: "grab",
                "&:hover": {bgcolor: "grey.100"},
            }}
            {...attributes}
            {...listeners}
        >
            {name}
        </Box>
    );
};

const ColumnList: React.FC<{ title: string; items: ColumnItem[] }> = ({title, items}) => {
    return (
        <Paper sx={{width: 220, p: 2, bgcolor: "grey.100", flexShrink: 0}}>
            <Typography variant="h6" gutterBottom>
                {title}
            </Typography>
            {items.map((col) => (
                <SortableItem key={col.id} id={col.id} name={col.name}/>
            ))}
        </Paper>
    );
};

const PivotTable = <T extends Record<string, unknown>>({
                                                           data,
                                                           activeColumns = [],
                                                           isLoading = false
                                                       }: PivotTableProps<T>) => {
    const [aggregator, setAggregator] = useState<Aggregation>("count");

    const [columns, setColumns] = useState<ColumnItem[]>(() => {
        if (data.length === 0) return [];
        const allKeys = Object.keys(data[0]);
        return allKeys.map((key) => ({
            id: key,
            name: key,
            container: activeColumns.includes(key) ? "active" : "available",
        }));
    });

    const sensor = useSensor(PointerSensor);

    const findContainer = (itemId: string): "available" | "active" | undefined => {
        return columns.find((c) => c.id === itemId)?.container;
    };

    const getContainerIDs = (container: "available" | "active") =>
        columns.filter((c) => c.container === container).map((c) => c.id);

    const handleDragEnd = (event: DragEndEvent) => {
        const {active, over} = event;
        if (!over) return;

        const oldContainer = findContainer(active.id.toString());
        const newContainer = findContainer(over.id.toString());
        if (!oldContainer || !newContainer) return;

        if (oldContainer === newContainer) {
            const subsetIds = getContainerIDs(oldContainer);
            const oldIndex = subsetIds.indexOf(active.id.toString());
            const newIndex = subsetIds.indexOf(over.id.toString());

            if (oldIndex !== -1 && newIndex !== -1 && oldIndex !== newIndex) {
                setColumns((prev) => {
                    const same = prev.filter((p) => p.container === oldContainer);
                    const reordered = arrayMove(same, oldIndex, newIndex);
                    const other = prev.filter((p) => p.container !== oldContainer);
                    return oldContainer === "available"
                        ? [...reordered, ...other]
                        : [...other, ...reordered];
                });
            }
        } else {
            setColumns((prev) => {
                const updated = [...prev];
                const idx = updated.findIndex((c) => c.id === active.id.toString());
                if (idx === -1) return prev;

                updated[idx] = {...updated[idx], container: newContainer};

                const newSubset = getContainerIDs(newContainer);
                const overIndex = newSubset.indexOf(over.id.toString());
                const oldIndex = newSubset.indexOf(active.id.toString());

                if (overIndex !== -1 && oldIndex !== -1 && overIndex !== oldIndex) {
                    const cItems = updated.filter((u) => u.container === newContainer);
                    const reordered = arrayMove(cItems, oldIndex, overIndex);
                    const other = updated.filter((u) => u.container !== newContainer);

                    return newContainer === "available"
                        ? [...reordered, ...other]
                        : [...other, ...reordered];
                }

                return updated;
            });
        }
    };

    const activeCols = columns.filter((c) => c.container === "active");

    const tableData = useMemo(() => {
        if (!data.length) return [];

        const activeIDs = activeCols.map((c) => c.id);

        // Group data by the first active column
        const firstCol = activeIDs[0];
        if (!firstCol) return [];

        const grouped = data.reduce((acc, row) => {
            const key = String(row[firstCol]);
            if (!acc[key]) {
                acc[key] = {
                    records: [],
                    uniqueValues: activeIDs.reduce((vals, id) => {
                        vals[id] = new Set();
                        return vals;
                    }, {} as Record<string, Set<unknown>>)
                };
            }
            acc[key].records.push(row);
            activeIDs.forEach(id => {
                acc[key].uniqueValues[id].add(row[id]);
            });
            return acc;
        }, {} as Record<string, { records: typeof data, uniqueValues: Record<string, Set<unknown>> }>);

        // Convert to table rows
        return Object.entries(grouped).map(([firstColValue, group], idx) => {
            const out: Record<string, unknown> = {
                id: idx,
                [firstCol]: firstColValue,
            };

            // Add unique counts for each column
            activeIDs.forEach(id => {
                out[`${id}_unique`] = Array.from(group.uniqueValues[id]).join(', ');
                out[`${id}_count`] = group.uniqueValues[id].size;
            });

            if (aggregator === "count") {
                out["Total"] = Object.values(group.uniqueValues)
                    .reduce((acc, set) => acc + set.size, 0);
            }

            return out;
        });
    }, [data, activeCols, aggregator]);

    const dataGridColumns = useMemo(() => {
        const cols: GridColDef[] = activeCols.map((col) => ({
            field: `${col.id}_unique`,
            headerName: col.name,
            flex: 2,
            renderCell: (params) => (
                <Box sx={{width: '100%'}}>
                    <Typography
                        sx={{
                            whiteSpace: 'normal',
                            lineHeight: '1.2',
                            wordBreak: 'break-word'
                        }}
                    >
                        {params.value}
                    </Typography>
                    <Typography
                        variant="caption"
                        color="textSecondary"
                        sx={{display: 'block'}}
                    >
                        (Count: {params.row[`${col.id}_count`]})
                    </Typography>
                </Box>
            ),
        }));

        cols.push({
            cellClassName: 'totalColumn',
            field: "Total",
            headerName: "Total Unique",
            flex: 1,
            valueFormatter: (params) => {
                const val = params.value;
                return typeof val === "number" ? val.toString() : val;
            },
        });

        return cols;
    }, [activeCols]);

    const CustomToolbar = () => {
        const handleReset = () => {
            setColumns((prev) => prev.map((col) => ({
                ...col,
                container: activeColumns.includes(col.id) ? "active" : "available"
            })));
        };

        return (
            <GridToolbarContainer sx={{p: 1, gap: 1}}>
                <Box sx={{flex: 1, minWidth: 320}}>
                    <GridToolbarQuickFilter/>
                </Box>
                <Box sx={{display: 'flex', gap: 1}}>
                    <GridToolbarFilterButton/>
                    <Button
                        size="small"
                        startIcon={<RestartAltIcon/>}
                        onClick={handleReset}
                    >
                        Reset
                    </Button>
                </Box>
            </GridToolbarContainer>
        );
    };

    return (
        <Box sx={{display: "flex", flexDirection: "column", height: "calc(100vh - 330px)"}}>
            <Box sx={{flex: 1, display: "flex", overflow: "hidden", maxHeight: "100%"}}>
                <Box
                    sx={{
                        borderRight: 1,
                        borderColor: "grey.300",
                        p: 1,
                        overflowY: "auto",
                    }}
                >
                    <Box sx={{p: 1, mb: 2, borderBottom: 1, borderColor: "grey.300"}}>
                        <FormControl size="small" fullWidth={true}>
                            <InputLabel>Aggregator</InputLabel>
                            <Select
                                label="Aggregator"
                                value={aggregator}
                                onChange={(e) => setAggregator(e.target.value as Aggregation)}
                            >
                                <MenuItem value="count">Count</MenuItem>
                            </Select>
                        </FormControl>
                    </Box>
                    <DndContext
                        sensors={[sensor]}
                        collisionDetection={closestCenter}
                        onDragEnd={handleDragEnd}
                    >
                        <SortableContext
                            items={columns.map((c) => c.id)}
                            strategy={verticalListSortingStrategy}
                        >
                            <Box sx={{display: "flex", gap: 2}}>
                                <ColumnList
                                    title="Available Columns"
                                    items={columns.filter((c) => c.container === "available")}
                                />
                                <ColumnList
                                    title="Active Columns"
                                    items={columns.filter((c) => c.container === "active")}
                                />
                            </Box>
                        </SortableContext>
                    </DndContext>
                </Box>

                <Box sx={{flex: 1, overflow: "auto", p: 2}}>
                    <Paper
                        sx={{
                            width: "100%",
                            height: "100%",
                            overflow: "hidden",
                            borderRadius: 1,
                            boxShadow: 2,
                        }}
                    >
                        <DataGrid
                            rows={tableData}
                            columns={dataGridColumns}
                            paginationModel={{page: 0, pageSize: 100}}
                            filterMode="client"
                            density="comfortable"
                            loading={isLoading}
                            slots={{
                                toolbar: CustomToolbar,
                                filterPanel: GridFilterPanel,
                            }}
                            slotProps={{
                                toolbar: {
                                    showQuickFilter: true,
                                },
                            }}
                            disableColumnFilter={false}
                            disableColumnMenu={true}
                            getRowHeight={() => 'auto'}
                            sx={{
                                '& .totalColumn': {
                                    backgroundColor: 'grey.100',
                                },
                                '& .MuiDataGrid-cell': {
                                    whiteSpace: 'normal !important',
                                    padding: '8px',
                                    display: 'flex',
                                    alignItems: 'center',
                                },
                                '& .MuiDataGrid-row': {
                                    maxHeight: 'none !important',
                                    minHeight: '52px !important',
                                },
                                '& .MuiDataGrid-renderingZone': {
                                    maxHeight: 'none !important',
                                },
                                '& .MuiDataGrid-virtualScroller': {
                                    minHeight: '100px !important',
                                }
                            }}
                        />
                    </Paper>
                </Box>
            </Box>
        </Box>
    );
};

export default PivotTable;
